(include "./widgets/music.yuck")
(include "./widgets/hyprland-workspace.yuck")

(defpoll time :interval "5s"
  :initial `{"hour":"?","min":"?"}`
`date +'{"hour":"%H","min":"%M"}'`)
(defpoll net :interval "100s"
  :initial `N/A`
  `nmcli -t -f SIGNAL,ACTIVE device wifi \
  | awk -F':' '{if($2=="yes")print$1}'`)

(deflisten playerctl `nix-shell ./shell/shell.nix --run "python ./shell/playerctl.py"`)
(deflisten pwd `echo $PWD`)

(defvar bar_tray_reveal false)

(defwindow powermenu
  :monitor 0
  :stacking "fg"
  :windowtype "normal"
  :wm-ignore true
  :stacking "overlay"
  :geometry (geometry
    :width "100%"
    :height "100%"
  )
  (powermenu_layout))

(defwidget powermenu_layout []
  (box :class "powermenu_layout-box" :space-evenly false :orientation "vertical"
    (box :valign "start" :space-evenly false :spacing 25
      (_sundial)
      (_battery :status {EWW_BATTERY != `` ? EWW_BATTERY.BAT0.status : "plugged"}
        :battery {EWW_BATTERY != `` ? EWW_BATTERY.BAT0.capacity : 100}
        :charge "󰂄" :one "󰁺" :two "󰁻" :three "󰁼" :four "󰁽"
      :five "󰁾" :six "󰁿" :seven "󰂀" :eight "󰂁" :nine "󰂂 " :full "󰁹" :plugged "")
      (_network :strength net :offline "󰣼" :excellent "󰣺" :good "󰣸"
      :okay "󰣶" :slow "󰣴")
      (label :text "|" :class "sep")
      (button :onclick "${EWW_CMD} close powermenu" :class "close-btn" ""))
    (box :space-evenly false :hexpand true :vexpand true
      (box :spacing 15 :class "tm-box" :space-evenly false :valign "end"
        :halign "start"
        (label :text "")
        (label :text "${time.hour} : ${time.min}"))
      (_buttons :shutdown "poweroff" :reboot "reboot"
        :logout "loginctl kill-session self"
      :shutdown_icon "󰐥" :reboot_icon "" :logout_icon "󰈆"))))


(defwidget _buttons [shutdown shutdown_icon reboot
  reboot_icon logout logout_icon]
  (box :class "powermenu_btns-box" :spacing 5
    :vexpand true :hexpand true
    :valign "center" :halign "center"
    :space-evenly false
    (button :onclick shutdown shutdown_icon)
    (button :onclick reboot reboot_icon)
    (button :onclick logout logout_icon)))

(defwidget _network [strength offline excellent good okay slow]
  (box :class "net-box"
    :space-evenly false
    :spacing 8
    (label :text {strength == "" ? offline :
      strength < 26 ? slow :
      strength < 51 ? okay :
    strength < 76 ? good : excellent})))

(defwidget _battery [battery status one two three
  four five six seven eight nine charge full plugged]
  (box :class "bat-box" :space-evenly false :spacing 8
    (label :text { status == "plugged" ? plugged :
      battery == 100 ? full :
      status == 'Charging' ? charge :
      battery > 90 ? nine :
      battery > 80 ? eight :
      battery > 70 ? seven :
      battery > 60 ? six :
      battery > 50 ? five :
      battery > 40 ? four :
      battery > 30 ? three :
    battery > 20 ? two : one})))

(defwidget _sundial []
  (label :class "sundial-lbl" :halign "end" :hexpand true
    :text {time.hour >= 2 && time.hour <= 4 ? "Early Morning" :
    time.hour <= 5 ? "Dawn" :
    time.hour >= 6 &&
    (time.hour <= 8 &&
    time.min <= 59) ? "Morning" :
    time.hour >= 9 &&
    (time.hour <= 11 && time.min <= 59)
    ? "Late Morning" :
    time.hour == 12 && time.min <= 29 ? "Midday" :
    time.hour >= 12 && time.hour <= 16 ? "Afternoon" :
    time.hour > 16 && time.hour <= 17 ?
    "Late Afternoon" :
    (time.hour >= 17 && time.min <= 1)
    || (time.hour <= 18 && time.min <= 20) ?
    "Early Evening" :
    time.hour >= 18 && time.hour <= 19 ? "Dusk" :
    time.hour > 19 && time.hour <= 21 ? "Late Evening" :
  time.hour > 21 ? "Night" : "Midnight"}))

(defwindow bar
  :monitor 0
  :geometry (geometry
    :x "0%"
    :y "0%"
    :width "100%"
    :height "20px"
  :anchor "top center")
  :stacking "fg"
  :windowtype "normal"
  :wm-ignore true
  :exclusive true
  (bar_layout)
)

(defwidget bar_layout []
  (box :class "bar_layout-box" :halign "fill" :valign "fill"
    (box :class "bar_workspaces" :halign "start" (workspace :inactive_sym "circle" :active_sym "chart-polar"))
    (box :class "bar_music-widget" :halign "center" (bar_music :image_p "${playerctl['mpris:artUrl']}" :title "${playerctl['xesam:title']}"))
    (box :class "bar_btn-box" :halign "end" :valign "fill" :space-evenly false :orientation "h" :spacing 5
      (label :class "phosphor-icon bar-icon" :text "clock")
      (label :text "${time.hour}:${time.min}")
      (eventbox
      :onhover `eww -c ${EWW_CONFIG_DIR} update bar_tray_reveal=true`
      :onhoverlost `eww -c ${EWW_CONFIG_DIR} update bar_tray_reveal=false`
      (box :orientation "h" :space-evenly false
        (revealer 
          :reveal bar_tray_reveal
          :transition "slideright"
          (systray :class "bar_tray")
        )
        (label :class "phosphor-icon bar-icon" :text "caret-left")
      )
    )
      (button :onclick "${EWW_CMD} open powermenu":class "bar_power-btn" (label :class "phosphor-icon bar-icon" :text "power" :valign "center"))
    )
  )
)